{"version":3,"sources":["Components/inc/ClaudCounter.module.css","Components/settings/SetCloud.module.css","Components/button/Button.tsx","Components/settings/SetCloud.tsx","Components/inc/Ð¡ounter.tsx","Components/inc/ClaudCounter.tsx","Components/VariantOne/CounterSet.tsx","Components/VariantTwoo/CustomCounter.tsx","App.tsx","Components/bll/counter-reducer.ts","Components/bll/store.ts","index.tsx","Components/Ferst.module.css"],"names":["module","exports","Button","name","props","className","disabled","s","buttonSet","onClick","onChange","setButton","changeSettings","SetCloud","counterValue","min","max","changeInc","e","setDispleys","preventDefault","namesValue","nameMax","nameMin","valueOnCklickButton","currentTarget","id","setOfButton","doubleValueOnCklickButton","item","displey","setCoumter","div","displeyInput","button_Value","onDoubleClick","redStyle","stylesInput","value","onKeyPress","type","step","button_Value_disabled","button","buttonName","settings","Counter","num","redFive","counter","divSet","ClaudCounter","disabledInc","disabledReset","disabledSet","buttonSetInc","buttonOne","buttonTwo","CounterSet","setCounterValue","CustomCounter","useState","setSettings","set","App","useSelector","state","useEffect","values","localStorage","getItem","JSON","parse","setItem","stringify","copy","copys","but","to","path","element","initialState","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46d94d5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ClaudCounter_item__2vEGf\",\"displey\":\"ClaudCounter_displey__3tp1O\",\"button\":\"ClaudCounter_button__13MKi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SetCloud_item__Xo9gz\",\"div\":\"SetCloud_div__10FXc\",\"displey\":\"SetCloud_displey__31L1i\",\"button\":\"SetCloud_button__WX6iT\",\"setCoumter\":\"SetCloud_setCoumter__26mm-\",\"redStyle\":\"SetCloud_redStyle__3fEwZ\",\"stylesInput\":\"SetCloud_stylesInput__1Vy6o\",\"button_Value\":\"SetCloud_button_Value__1LPDv\",\"buttonSet\":\"SetCloud_buttonSet__1JqtV\",\"button_Value_disabled\":\"SetCloud_button_Value_disabled__3ypfZ\",\"displeyInput\":\"SetCloud_displeyInput__3dG47\"};","import React, {useState} from 'react';\r\nimport s from '../Ferst.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    buttonSetInc?: () => void,\r\n    setButton?: () => void\r\n    name: string\r\n    changeSettings?: (set: boolean) => void\r\n    disabled?: boolean\r\n    onChange?: (name: string) => void\r\n\r\n}\r\n\r\nexport function Button({name, ...props}: ButtonPropsType) {\r\n    const buttonHandler = () => {\r\n        if(props.onChange)props.onChange(name)\r\n        if(props.setButton){props.setButton()}\r\n        if(props.changeSettings){props.changeSettings(false)}\r\n    }\r\n    return (\r\n        <button\r\n            className={props.disabled ? s.disabled : s.buttonSet}\r\n            disabled={props.disabled}\r\n            onClick={buttonHandler}\r\n        >\r\n            {name}\r\n\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, MouseEvent} from \"react\";\r\nimport s from './SetCloud.module.css'\r\nimport {Button} from \"../button/Button\";\r\n\r\ntype CV = {\r\n    min: number, max: number, num: number\r\n}\r\ntype InputNumberType = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    namesValue: { nameMax: string, nameMin: string }\r\n    setOfButton: (value: number, name: string) => void\r\n    setDispleys: (display: boolean) => void\r\n    setCounterValue: (value: CV) => void\r\n    displey: boolean\r\n    settings?: boolean\r\n    changeSettings?: (set: boolean) => void\r\n}\r\nexport const SetCloud = ({counterValue, ...props}: InputNumberType) => {\r\n    let {min, max} = counterValue\r\n    const changeInc = (e: MouseEvent<HTMLInputElement>) => {\r\n        props.setDispleys(false)\r\n        e.preventDefault()\r\n    }\r\n    const setButton = () => {\r\n        props.setDispleys(true)\r\n        props.setOfButton(min, props.buttonName.button)\r\n        if (props.changeSettings) {\r\n            props.changeSettings(!props.settings)\r\n        }\r\n    }\r\n    let {nameMax, nameMin} = props.namesValue\r\n\r\n    const valueOnCklickButton = (e: MouseEvent<HTMLButtonElement>) => {\r\n        if (e.currentTarget.id == nameMax) {\r\n            props.setOfButton(max + 1, nameMax)\r\n        }\r\n        if (e.currentTarget.id == '-') {\r\n            props.setOfButton(max - 1, nameMax)\r\n        }\r\n\r\n        if (e.currentTarget.id == nameMin) {\r\n            props.setOfButton(min + 1, nameMin)\r\n        }\r\n        if (e.currentTarget.id == '--') {\r\n            props.setOfButton(min - 1, nameMin)\r\n        }\r\n        props.setDispleys(false)\r\n    }\r\n    const doubleValueOnCklickButton = (e: MouseEvent<HTMLButtonElement>) => {\r\n        if (e.currentTarget.id == nameMax) {\r\n            props.setOfButton(max + 10, nameMax)\r\n        }\r\n        if (e.currentTarget.id == '-' && max >= min + 10) {\r\n            props.setOfButton(max - 10, nameMax)\r\n        }\r\n\r\n        if (e.currentTarget.id == nameMin && min + 10 <= max) {\r\n            props.setOfButton(min + 10, nameMin)\r\n        }\r\n        if (e.currentTarget.id == '--' && min - 10 >= -1) {\r\n            props.setOfButton(min - 10, nameMin)\r\n        }\r\n        props.setDispleys(false)\r\n    }\r\n\r\n\r\n    const disabled = min === max || (min === -1)\r\n\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.displey}>\r\n                <div className={s.setCoumter}>\r\n                    <div className={s.div}>\r\n                        {nameMax}\r\n                    </div>\r\n                    <div className={s.displeyInput}>\r\n                        <button\r\n                            className={s.button_Value}\r\n                            id={nameMax}\r\n                            onClick={valueOnCklickButton}\r\n                            onDoubleClick={doubleValueOnCklickButton}\r\n                        >\r\n                            +\r\n                        </button>\r\n                        <input\r\n                            className={min === max ? s.redStyle : s.stylesInput}\r\n                            min={min}\r\n                            id={nameMax}\r\n                            value={max}\r\n                            onKeyPress={(e) => {\r\n                                e.preventDefault()\r\n                            }}\r\n                            type=\"number\"\r\n                            onClick={changeInc}\r\n                            step=\"1\"\r\n                            disabled={true}\r\n                        />\r\n                        <button\r\n                            className={min === max ? s.button_Value_disabled : s.button_Value}\r\n                            id={'-'}\r\n                            onClick={valueOnCklickButton}\r\n                            onDoubleClick={doubleValueOnCklickButton}\r\n                            disabled={max === min}\r\n                        >\r\n                            -\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className={s.setCoumter}>\r\n                    <div className={s.div}>\r\n                        {nameMin}\r\n                    </div>\r\n                    <div className={s.displeyInput}>\r\n                        <button\r\n                            className={min === max ? s.button_Value_disabled : s.button_Value}\r\n                            id={nameMin}\r\n                            onClick={valueOnCklickButton}\r\n                            onDoubleClick={doubleValueOnCklickButton}\r\n                            disabled={max === min}\r\n                        >\r\n                            +\r\n                        </button>\r\n                        <input\r\n                            className={min === max ? s.redStyle : min === -1 ? s.redStyle : s.stylesInput}\r\n                            id={nameMin}\r\n                            value={min}\r\n                            onKeyPress={(e) => {\r\n                                e.preventDefault()\r\n                            }}\r\n                            type=\"number\"\r\n                            min={-1}\r\n                            max={max}\r\n                            onClick={changeInc}\r\n                            disabled={true}\r\n                        />\r\n                        <button\r\n                            className={min === -1 ? s.button_Value_disabled : s.button_Value}\r\n                            id={'--'}\r\n                            onClick={valueOnCklickButton}\r\n                            onDoubleClick={doubleValueOnCklickButton}\r\n                            disabled={min === -1}\r\n                        >\r\n                            -\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={!props.displey ? s.buttonSet : s.button}>\r\n                <Button\r\n                    disabled={disabled}\r\n                    setButton={setButton}\r\n                    name={props.buttonName.button}\r\n\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from '../Ferst.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    min: number,\r\n    max: number,\r\n    num: number\r\n    displey: boolean,\r\n}\r\n\r\nexport function Counter({min, max, ...props}: ButtonPropsType) {\r\n\r\n    const SetDispley = () => {\r\n        return (\r\n            <div\r\n                className={s.divSet}>\r\n                enter value\r\n            </div>\r\n        )\r\n    }\r\n    const ErrorDispl = () => {\r\n        return(\r\n            <div\r\n                className={s.divSet}>\r\n                Error\r\n                enter correct value\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div\r\n\r\n            className={props.num === max ? s.redFive : s.counter}>\r\n            {props.displey ? props.num : (min === max || min === -1 || min > max) ? ErrorDispl() : SetDispley()}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import s from './ClaudCounter.module.css'\r\nimport {Button} from \"../button/Button\";\r\nimport {Counter} from \"./Ð¡ounter\";\r\nimport React from \"react\";\r\n\r\ntype buttonProps = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonSetInc: (e: string) => void,\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    displey: boolean\r\n    setDispleys: (display: boolean) => void\r\n    settings?: boolean\r\n    changeSettings?: (set: boolean) => void\r\n}\r\n\r\nexport function ClaudCounter({buttonName, counterValue, ...props}: buttonProps) {\r\n\r\n    const disabledInc = counterValue.num === counterValue.max || (counterValue.min === -1)\r\n    const disabledReset = counterValue.num === counterValue.min || (counterValue.min === -1)\r\n    const disabledSet = !props.displey\r\n        || (counterValue.min === -1)\r\n\r\n\r\n\r\n    const onChange = (name: string) => {\r\n         props.buttonSetInc(name)\r\n        if(name === buttonName.button){\r\n        if(props.changeSettings) {props.changeSettings(false)}}\r\n    }\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.displey}>\r\n                <Counter min={counterValue.min} max={counterValue.max} num={counterValue.num} displey={props.displey}/>\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button\r\n                    buttonSetInc={() => props.buttonSetInc(buttonName.buttonOne)}\r\n                    name={buttonName.buttonOne}\r\n                    disabled={disabledInc}\r\n                    onChange={onChange}\r\n                />\r\n                <Button\r\n                    buttonSetInc={() => props.buttonSetInc(buttonName.buttonTwo)}\r\n                    name={buttonName.buttonTwo}\r\n                    disabled={disabledReset}\r\n                    onChange={onChange}\r\n                />\r\n\r\n                {props.settings &&\r\n                <Button\r\n                    changeSettings={props.changeSettings}\r\n                    name={buttonName.button}\r\n                    disabled={disabledSet}\r\n                    onChange={onChange}\r\n                />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {SetCloud} from \"../settings/SetCloud\";\r\nimport './../../App.css';\r\nimport {ClaudCounter} from \"../inc/ClaudCounter\";\r\n\r\ntype CV = {\r\n    min: number, max: number, num: number\r\n}\r\ntype CoutnerSetType = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string}\r\n    namesValue: { nameMax: string, nameMin: string }\r\n    setOfButton: (value: number, name: string) => void\r\n    setDispleys: (display: boolean) => void\r\n    setCounterValue: (value: CV) => void\r\n    displey: boolean\r\n    buttonSetInc: (e: string) => void,\r\n}\r\n\r\nexport const CounterSet = (props: CoutnerSetType) => {\r\n    return (\r\n        <div className={'conteiner'}>\r\n            <div>\r\n                <SetCloud\r\n                    counterValue={props.counterValue}\r\n                    buttonName={props.buttonName}\r\n                    namesValue={props.namesValue}\r\n                    setOfButton={props.setOfButton}\r\n                    setCounterValue={props.setCounterValue}\r\n                    setDispleys={props.setDispleys}\r\n                    displey={props.displey}\r\n                />\r\n            </div>\r\n            <div>\r\n                <ClaudCounter\r\n                    counterValue={props.counterValue}\r\n                    buttonSetInc={props.buttonSetInc}\r\n                    buttonName={props.buttonName}\r\n                    displey={props.displey}\r\n                    setDispleys={props.setDispleys}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport './../../App.css';\r\nimport {SetCloud} from \"../settings/SetCloud\";\r\nimport {ClaudCounter} from \"../inc/ClaudCounter\";\r\n\r\ntype CV = {\r\n    min: number, max: number, num: number\r\n}\r\ntype CoutnerSetType = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    namesValue: { nameMax: string, nameMin: string }\r\n    setOfButton: (value: number, name: string) => void\r\n    setDispleys: (display: boolean) => void\r\n    setCounterValue: (value: CV) => void\r\n    displey: boolean\r\n    buttonSetInc: (e: string) => void,\r\n}\r\nexport const CustomCounter = (props: CoutnerSetType) => {\r\n    const [settings, setSettings] = useState(true)\r\n\r\n\r\n    const changeSettings = (set: boolean) => {\r\n        setSettings(set)\r\n    }\r\n    return (\r\n        <div className={'conteiner'}>\r\n\r\n            {!settings ?\r\n                <SetCloud\r\n                    counterValue={props.counterValue}\r\n                    buttonName={props.buttonName}\r\n                    namesValue={props.namesValue}\r\n                    setOfButton={props.setOfButton}\r\n                    setCounterValue={props.setCounterValue}\r\n                    setDispleys={props.setDispleys}\r\n                    displey={props.displey}\r\n                    settings={settings}\r\n                    changeSettings={changeSettings}\r\n                />\r\n                :\r\n                <ClaudCounter\r\n                    settings={settings}\r\n                    counterValue={props.counterValue}\r\n                    buttonSetInc={props.buttonSetInc}\r\n                    buttonName={props.buttonName}\r\n                    displey={props.displey}\r\n                    changeSettings={changeSettings}\r\n                    setDispleys={props.setDispleys}\r\n                />}\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {CounterSet} from \"./Components/VariantOne/CounterSet\";\r\nimport {BrowserRouter, NavLink, Route, Routes} from \"react-router-dom\";\r\nimport {CustomCounter} from \"./Components/VariantTwoo/CustomCounter\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./Components/bll/store\";\r\n\r\ntype StateType = {min: number, max: number, num: number}\r\ntype ValueType = {}\r\n\r\nfunction App() {\r\n    const countersValue = useSelector<AppStateType, StateType>(state => state.counter\r\n        )\r\n\r\n\r\n    let buttonName = {buttonOne: \"INC\", buttonTwo: \"RESET\", button: \"SET\"}\r\n    let {buttonOne, buttonTwo} = buttonName\r\n    let namesValue = {nameMax: \"Max Value\", nameMin: \"Min Value\"}\r\n    const [displey, setDispleys] = useState(true)\r\n\r\n    const [counterValue, setCounterValue] = useState<StateType>({min: 0, max: 10, num: 0})\r\n    useEffect(() => {\r\n        let values = (localStorage.getItem('values'))\r\n        if (values) {\r\n            let num = JSON.parse(values)\r\n            num.num = JSON.parse(values).min\r\n            setCounterValue(num)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('values', JSON.stringify(counterValue))\r\n    }, [counterValue])\r\n\r\n    const setOfButton = (value: number, name: string) => {\r\n        let copy = {...counterValue}\r\n        if (name == namesValue.nameMax) {\r\n            setCounterValue({...copy, max: value})\r\n        }\r\n        if (name == namesValue.nameMin) {\r\n            let copys = {...counterValue, min: value}\r\n            setCounterValue({...copys})\r\n        }\r\n        if (name == buttonName.button) {\r\n            let copys = {...counterValue, num: value}\r\n            setCounterValue({...copys})\r\n        }\r\n    }\r\n\r\n    const buttonSetInc = (but: string) => {\r\n        let copy = {...counterValue}\r\n        if (but === buttonOne && counterValue.num < counterValue.max) {\r\n            setCounterValue({...copy, num: (counterValue.num + 1)})\r\n        }\r\n        if (but === buttonTwo) {\r\n            setCounterValue({...copy, num: counterValue.min})\r\n        }\r\n    }\r\n    return (\r\n        <BrowserRouter>\r\n            <div className={'App'}>\r\n                <div className={\"block\"}>\r\n                    <NavLink to={\"/ClaudFive/\"}>\r\n                        <button className={'select'}>First_option</button>\r\n                    </NavLink>\r\n                    <NavLink to={\"/SecondVar/\"}>\r\n                        <button className={'select'}>Second_option</button>\r\n                    </NavLink>\r\n                </div>\r\n                <Routes>\r\n                    <Route path='/ClaudFive'\r\n                           element={<CounterSet\r\n                               counterValue={counterValue}\r\n                               buttonName={buttonName}\r\n                               namesValue={namesValue}\r\n                               setOfButton={setOfButton}\r\n                               setCounterValue={setCounterValue}\r\n                               setDispleys={setDispleys}\r\n                               displey={displey}\r\n                               buttonSetInc={buttonSetInc}\r\n                           />}/>\r\n                    <Route path='/SecondVar'\r\n                           element={\r\n                               <CustomCounter\r\n                                   counterValue={counterValue}\r\n                                   buttonName={buttonName}\r\n                                   namesValue={namesValue}\r\n                                   setOfButton={setOfButton}\r\n                                   setCounterValue={setCounterValue}\r\n                                   setDispleys={setDispleys}\r\n                                   displey={displey}\r\n                                   buttonSetInc={buttonSetInc}\r\n                               />}/>\r\n                </Routes>\r\n            </div>\r\n\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {min: 0, max: 10, num: 0}\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: any):InitialStateType => {\r\n    return state\r\n}","import {combineReducers, createStore,  } from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppStoreType = typeof store\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport { store } from './Components/bll/store';\n\nReactDOM.render(\n    <Provider store={store} >\n    <App />\n    </Provider>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonSet\":\"Ferst_buttonSet__2iAw-\",\"disabled\":\"Ferst_disabled__1SUKq\",\"redFive\":\"Ferst_redFive__2b403\",\"div\":\"Ferst_div__sKDBO\",\"divSet\":\"Ferst_divSet__19U-Y\",\"counter\":\"Ferst_counter__2BsHd\"};"],"sourceRoot":""}