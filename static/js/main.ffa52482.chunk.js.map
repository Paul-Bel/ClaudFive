{"version":3,"sources":["Components/inc/ClaudCounter.module.css","Components/button/Button.tsx","Components/settings/SetCloud.tsx","Components/inc/Ð¡ounter.tsx","Components/inc/ClaudCounter.tsx","Components/VariantOne/CounterSet.tsx","Components/VariantTwoo/CustomCounter.tsx","App.tsx","index.tsx","Components/settings/SetCloud.module.css","Components/Ferst.module.css"],"names":["module","exports","Button","name","props","className","disabled","s","buttonSet","onClick","onChange","setButton","changeSettings","SetCloud","counterValue","min","max","changeInc","setDispleys","namesValue","nameMax","nameMin","setValue","e","currentTarget","id","setOfButton","valueAsNumber","Number","value","item","displey","setCoumter","div","redStyle","stylesInput","type","button","console","log","settings","buttonName","Counter","num","redFive","counter","divSet","ClaudCounter","disabledInc","disabledReset","disabledSet","buttonSetInc","buttonOne","buttonTwo","CounterSet","setCounterValue","CustomCounter","useState","setSettings","set","App","useEffect","values","localStorage","getItem","JSON","parse","setItem","stringify","copy","copys","but","to","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffa52482.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ClaudCounter_item__2vEGf\",\"displey\":\"ClaudCounter_displey__3tp1O\",\"button\":\"ClaudCounter_button__13MKi\"};","import React, {useState} from 'react';\r\nimport s from '../Ferst.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    buttonSetInc?: () => void,\r\n    setButton?: () => void\r\n    name: string\r\n    changeSettings?: (set: boolean) => void\r\n    disabled?: boolean\r\n    onChange?: (name: string) => void\r\n\r\n}\r\n\r\nexport function Button({name, ...props}: ButtonPropsType) {\r\n    const buttonHandler = () => {\r\n        if(props.onChange)props.onChange(name)\r\n        if(props.setButton){props.setButton()}\r\n        if(props.changeSettings){props.changeSettings(false)}\r\n    }\r\n    return (\r\n        <button\r\n            className={props.disabled ? s.disabled : s.buttonSet}\r\n            disabled={props.disabled}\r\n            onClick={buttonHandler}\r\n        >\r\n            {name}\r\n\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './SetCloud.module.css'\r\nimport {Button} from \"../button/Button\";\r\n\r\ntype CV = {\r\n    min: number, max: number, num: number\r\n}\r\ntype InputNumberType = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    namesValue: { nameMax: string, nameMin: string }\r\n    setOfButton: (value: number, name: string) => void\r\n    setDispleys: (display: boolean) => void\r\n    setCounterValue: (value: CV) => void\r\n    displey: boolean\r\n    settings?: boolean\r\n    changeSettings?: (set: boolean) => void\r\n}\r\nexport const SetCloud = ({counterValue, ...props}: InputNumberType) => {\r\n    let {min, max} = counterValue\r\n    const changeInc = () => {\r\n        props.setDispleys(false)\r\n    }\r\n    const setButton = () => {\r\n        console.log(props.settings + ' ttttttttttt')\r\n        props.setDispleys(true)\r\n        props.setOfButton(min, props.buttonName.button)\r\n        if (props.changeSettings) {\r\n            props.changeSettings(!props.settings)\r\n        }\r\n    }\r\n    let {nameMax, nameMin} = props.namesValue\r\n    const setValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.id == nameMax) {\r\n            props.setOfButton(e.currentTarget.valueAsNumber, nameMax)\r\n        }\r\n        if (e.currentTarget.id == nameMin) {\r\n            props.setOfButton(Number(e.currentTarget.value), nameMin)\r\n        }\r\n        if (props.changeSettings) {\r\n            props.changeSettings(false)\r\n        }\r\n    }\r\n    const disabled = min === max || (min === -1)\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.displey}>\r\n                <div className={s.setCoumter}>\r\n                    <div className={s.div}>\r\n                        {nameMax}\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className={min === max ? s.redStyle : s.stylesInput}\r\n                            min={min}\r\n                            id={nameMax}\r\n                            value={max}\r\n                            onChange={setValue}\r\n                            type=\"number\"\r\n                            onClick={changeInc}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={s.setCoumter}>\r\n                    <div className={s.div}>\r\n                        {nameMin}\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className={min === max ? s.redStyle : min === -1 ? s.redStyle : s.stylesInput}\r\n                            id={nameMin}\r\n                            value={min}\r\n                            onChange={setValue}\r\n                            type=\"number\"\r\n                            min={-1}\r\n                            max={max}\r\n                            onClick={changeInc}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button\r\n                    disabled={disabled}\r\n                    setButton={setButton}\r\n                    name={props.buttonName.button}\r\n\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from '../Ferst.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    min: number,\r\n    max: number,\r\n    num: number\r\n    displey: boolean,\r\n}\r\n\r\nexport function Counter({min, max, ...props}: ButtonPropsType) {\r\n\r\n    const SetDispley = () => {\r\n        return (\r\n            <div\r\n                className={s.divSet}>\r\n                enter value\r\n            </div>\r\n        )\r\n    }\r\n    const ErrorDispl = () => {\r\n        return(\r\n            <div\r\n                className={s.divSet}>\r\n                Error\r\n                enter correct value\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div\r\n            // style={div}\r\n            className={props.num === max ? s.redFive : s.counter}>\r\n            {props.displey ? props.num : (min === max || min === -1 || min > max) ? ErrorDispl() : SetDispley()}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import s from './ClaudCounter.module.css'\r\nimport {Button} from \"../button/Button\";\r\nimport {Counter} from \"./Ð¡ounter\";\r\nimport React from \"react\";\r\n\r\ntype buttonProps = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonSetInc: (e: string) => void,\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    displey: boolean\r\n    setDispleys: (display: boolean) => void\r\n    settings?: boolean\r\n    changeSettings?: (set: boolean) => void\r\n}\r\n\r\nexport function ClaudCounter({buttonName, counterValue, ...props}: buttonProps) {\r\n\r\n    const disabledInc = counterValue.num === counterValue.max || (counterValue.min === -1)\r\n    const disabledReset = counterValue.num === counterValue.min || (counterValue.min === -1)\r\n    const disabledSet = !props.displey\r\n        || (counterValue.min === -1)\r\n\r\n\r\n\r\n    const onChange = (name: string) => {\r\n         props.buttonSetInc(name)\r\n        if(name === buttonName.button){\r\n        if(props.changeSettings) {props.changeSettings(false)}}\r\n    }\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.displey}>\r\n                <Counter min={counterValue.min} max={counterValue.max} num={counterValue.num} displey={props.displey}/>\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button\r\n                    buttonSetInc={() => props.buttonSetInc(buttonName.buttonOne)}\r\n                    name={buttonName.buttonOne}\r\n                    disabled={disabledInc}\r\n                    onChange={onChange}\r\n                />\r\n                <Button\r\n                    buttonSetInc={() => props.buttonSetInc(buttonName.buttonTwo)}\r\n                    name={buttonName.buttonTwo}\r\n                    disabled={disabledReset}\r\n                    onChange={onChange}\r\n                />\r\n\r\n                {props.settings &&\r\n                <Button\r\n                    changeSettings={props.changeSettings}\r\n                    name={buttonName.button}\r\n                    disabled={disabledSet}\r\n                    onChange={onChange}\r\n                />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {SetCloud} from \"../settings/SetCloud\";\r\nimport './../../App.css';\r\nimport {ClaudCounter} from \"../inc/ClaudCounter\";\r\n\r\ntype CV = {\r\n    min: number, max: number, num: number\r\n}\r\ntype CoutnerSetType = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string}\r\n    namesValue: { nameMax: string, nameMin: string }\r\n    setOfButton: (value: number, name: string) => void\r\n    setDispleys: (display: boolean) => void\r\n    setCounterValue: (value: CV) => void\r\n    displey: boolean\r\n    buttonSetInc: (e: string) => void,\r\n}\r\n\r\nexport const CounterSet = (props: CoutnerSetType) => {\r\n    return (\r\n        <div className={'conteiner'}>\r\n            <div>\r\n                <SetCloud\r\n                    counterValue={props.counterValue}\r\n                    buttonName={props.buttonName}\r\n                    namesValue={props.namesValue}\r\n                    setOfButton={props.setOfButton}\r\n                    setCounterValue={props.setCounterValue}\r\n                    setDispleys={props.setDispleys}\r\n                    displey={props.displey}\r\n                />\r\n            </div>\r\n            <div>\r\n                <ClaudCounter\r\n                    counterValue={props.counterValue}\r\n                    buttonSetInc={props.buttonSetInc}\r\n                    buttonName={props.buttonName}\r\n                    displey={props.displey}\r\n                    setDispleys={props.setDispleys}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport './../../App.css';\r\nimport {SetCloud} from \"../settings/SetCloud\";\r\nimport {ClaudCounter} from \"../inc/ClaudCounter\";\r\n\r\ntype CV = {\r\n    min: number, max: number, num: number\r\n}\r\ntype CoutnerSetType = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    namesValue: { nameMax: string, nameMin: string }\r\n    setOfButton: (value: number, name: string) => void\r\n    setDispleys: (display: boolean) => void\r\n    setCounterValue: (value: CV) => void\r\n    displey: boolean\r\n    buttonSetInc: (e: string) => void,\r\n}\r\nexport const CustomCounter = (props: CoutnerSetType) => {\r\n    const [settings, setSettings] = useState(true)\r\n    console.log(settings + '  sett')\r\n    const changeSettings = (set: boolean) => {\r\n        setSettings(set)\r\n    }\r\n    return (\r\n        <div className={'conteiner'}>\r\n\r\n            {!settings ?\r\n                <SetCloud\r\n                    counterValue={props.counterValue}\r\n                    buttonName={props.buttonName}\r\n                    namesValue={props.namesValue}\r\n                    setOfButton={props.setOfButton}\r\n                    setCounterValue={props.setCounterValue}\r\n                    setDispleys={props.setDispleys}\r\n                    displey={props.displey}\r\n                    settings={settings}\r\n                    changeSettings={changeSettings}\r\n                />\r\n                :\r\n                <ClaudCounter\r\n                    settings={settings}\r\n                    counterValue={props.counterValue}\r\n                    buttonSetInc={props.buttonSetInc}\r\n                    buttonName={props.buttonName}\r\n                    displey={props.displey}\r\n                    changeSettings={changeSettings}\r\n                    setDispleys={props.setDispleys}\r\n                />}\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {CounterSet} from \"./Components/VariantOne/CounterSet\";\r\nimport {BrowserRouter, NavLink, Route, Routes} from \"react-router-dom\";\r\nimport {CustomCounter} from \"./Components/VariantTwoo/CustomCounter\";\r\n\r\nfunction App() {\r\n    let buttonName = {buttonOne: \"INC\", buttonTwo: \"RESET\", button: \"SET\"}\r\n    let {buttonOne, buttonTwo} = buttonName\r\n    let namesValue = {nameMax: \"Max Value\", nameMin: \"Min Value\"}\r\n    const [displey, setDispleys] = useState(true)\r\n    console.log(displey + ' app')\r\n    console.log(displey + ' znach')\r\n    const [counterValue, setCounterValue] = useState({min: 0, max: 10, num: 0})\r\n    useEffect(() => {\r\n        let values = (localStorage.getItem('values'))\r\n        if (values) {\r\n            let num = JSON.parse(values)\r\n            num.num = JSON.parse(values).min\r\n            setCounterValue(num)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('values', JSON.stringify(counterValue))\r\n    }, [counterValue])\r\n\r\n    const setOfButton = (value: number, name: string) => {\r\n        let copy = {...counterValue}\r\n        if (name == namesValue.nameMax) {\r\n            setCounterValue({...copy, max: value})\r\n        }\r\n        if (name == namesValue.nameMin) {\r\n            let copys = {...counterValue, min: value}\r\n            setCounterValue({...copys})\r\n        }\r\n        if (name == buttonName.button) {\r\n            let copys = {...counterValue, num: value}\r\n            setCounterValue({...copys})\r\n        }\r\n    }\r\n\r\n    const buttonSetInc = (but: string) => {\r\n        let copy = {...counterValue}\r\n        if (but === buttonOne && counterValue.num < counterValue.max) {\r\n            setCounterValue({...copy, num: (counterValue.num + 1)})\r\n        }\r\n        if (but === buttonTwo) {\r\n            setCounterValue({...copy, num: counterValue.min})\r\n        }\r\n    }\r\n    return (\r\n        <BrowserRouter>\r\n            <div className={'App'}>\r\n                <div className={\"block\"}>\r\n                    <NavLink to={\"/ClaudFive/\"}>\r\n                        <button className={'select'}>First_option</button>\r\n                    </NavLink>\r\n                    <NavLink to={\"/SecondVar/\"}>\r\n                        <button className={'select'}>Second_option</button>\r\n                    </NavLink>\r\n                </div>\r\n                <Routes>\r\n                    <Route path='/ClaudFive'\r\n                           element={<CounterSet\r\n                               counterValue={counterValue}\r\n                               buttonName={buttonName}\r\n                               namesValue={namesValue}\r\n                               setOfButton={setOfButton}\r\n                               setCounterValue={setCounterValue}\r\n                               setDispleys={setDispleys}\r\n                               displey={displey}\r\n                               buttonSetInc={buttonSetInc}\r\n                           />}/>\r\n                    <Route path='/SecondVar'\r\n                           element={\r\n                               <CustomCounter\r\n                                   counterValue={counterValue}\r\n                                   buttonName={buttonName}\r\n                                   namesValue={namesValue}\r\n                                   setOfButton={setOfButton}\r\n                                   setCounterValue={setCounterValue}\r\n                                   setDispleys={setDispleys}\r\n                                   displey={displey}\r\n                                   buttonSetInc={buttonSetInc}\r\n                               />}/>\r\n                </Routes>\r\n            </div>\r\n\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SetCloud_item__Xo9gz\",\"div\":\"SetCloud_div__10FXc\",\"displey\":\"SetCloud_displey__31L1i\",\"button\":\"SetCloud_button__WX6iT\",\"setCoumter\":\"SetCloud_setCoumter__26mm-\",\"redStyle\":\"SetCloud_redStyle__3fEwZ\",\"stylesInput\":\"SetCloud_stylesInput__1Vy6o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonSet\":\"Ferst_buttonSet__2iAw-\",\"disabled\":\"Ferst_disabled__1SUKq\",\"redFive\":\"Ferst_redFive__2b403\",\"div\":\"Ferst_div__sKDBO\",\"divSet\":\"Ferst_divSet__19U-Y\",\"counter\":\"Ferst_counter__2BsHd\"};"],"sourceRoot":""}