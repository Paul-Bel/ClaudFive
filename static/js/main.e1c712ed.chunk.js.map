{"version":3,"sources":["Components/inc/ClaudCounter.module.css","Components/inc/Button.tsx","Components/settings/SetCloud.tsx","Components/inc/Ð¡ounter.tsx","Components/inc/ClaudCounter.tsx","Components/VariantOne/CounterSet.tsx","Components/VariantTwoo/CustomCounter.tsx","App.tsx","index.tsx","Components/settings/SetCloud.module.css","Components/Ferst.module.css"],"names":["module","exports","Button","num","min","max","buttonName","name","props","disebled","buttonTwo","display","button","buttonOne","className","s","disabled","buttonSet","onClick","buttonControl","setButton","changeSettings","SetCloud","counterValue","changeInc","setDispleys","namesValue","nameMax","nameMin","setValue","e","currentTarget","id","setOfButton","valueAsNumber","Number","value","item","displey","setCoumter","div","redStyle","stylesInput","onChange","type","Counter","redFive","counter","divSet","ClaudCounter","CounterSet","setCounterValue","CustomCounter","useState","settings","setSettings","App","console","log","useEffect","values","localStorage","getItem","JSON","parse","setItem","stringify","copy","copys","buttonInc","but","to","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1c712ed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ClaudCounter_item__2vEGf\",\"displey\":\"ClaudCounter_displey__3tp1O\",\"button\":\"ClaudCounter_button__13MKi\"};","import React, {useState} from 'react';\r\nimport s from '../Ferst.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    num?: number,\r\n    buttonControl?: () => void,\r\n    min?: number,\r\n    max?: number,\r\n    name: string\r\n    setButton?: () => void\r\n    display?: boolean\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    id?: boolean\r\n    changeSettings?: () => void\r\n}\r\n\r\nexport function Button({num, min, max, buttonName, name, ...props}: ButtonPropsType) {\r\n    const buttonHandler = () => {\r\n        if (props.buttonControl) {\r\n            props.buttonControl()\r\n        }\r\n        if (props.setButton) {\r\n            props.setButton()\r\n        }\r\n        if (props.changeSettings) {\r\n            props.changeSettings()\r\n        }\r\n    }\r\n    const disebled = (name === buttonName.buttonTwo && !props.display)\r\n        || (name === buttonName.button && props.display)\r\n        || (name === buttonName.buttonOne && num === max)\r\n        || (name === buttonName.buttonTwo && num === min)\r\n        || (min === -1)\r\n        || (min === max)\r\n\r\n\r\n\r\n    return (\r\n        <button\r\n            className={disebled ? s.disabled : s.buttonSet}\r\n            disabled={disebled}\r\n            onClick={buttonHandler}\r\n        >\r\n            {name}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './SetCloud.module.css'\r\nimport {Button} from \"../inc/Button\";\r\n\r\ntype CV = {\r\n    min: number, max: number, num: number\r\n}\r\ntype InputNumberType = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    namesValue: { nameMax: string, nameMin: string }\r\n    changeInc: (value: number, name: string) => void\r\n    setOfButton: (value: number, name: string) => void\r\n    setDispleys: (display: boolean) => void\r\n    setCounterValue: (value: CV) => void\r\n    displey: boolean\r\n    id?: boolean\r\n    changeSettings?: () => void\r\n}\r\n\r\nexport const SetCloud = ({counterValue, ...props}: InputNumberType) => {\r\n    let {min, max} = counterValue\r\n    const changeInc = () => {\r\n        props.setDispleys(false)\r\n    }\r\n    const setButton = () => {\r\n        props.setDispleys(true)\r\n        props.setOfButton(min, props.buttonName.button)\r\n        if (props.changeSettings) {\r\n            props.changeSettings()\r\n        }\r\n    }\r\n    let {nameMax, nameMin} = props.namesValue\r\n    const setValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.id == nameMax) {\r\n            props.setOfButton(e.currentTarget.valueAsNumber, nameMax)\r\n        }\r\n        if (e.currentTarget.id == nameMin) {\r\n            props.setOfButton(Number(e.currentTarget.value), nameMin)\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.displey}>\r\n                <div className={s.setCoumter}>\r\n                    <div className={s.div}>\r\n                        {nameMax}\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className={min === max ? s.redStyle : s.stylesInput}\r\n                            min={min}\r\n                            id={nameMax}\r\n                            value={max}\r\n                            onChange={setValue}\r\n                            type=\"number\"\r\n                            onClick={changeInc}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={s.setCoumter}>\r\n                    <div className={s.div}>\r\n                        {nameMin}\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className={min === max ? s.redStyle : min === -1 ? s.redStyle : s.stylesInput}\r\n                            id={nameMin}\r\n                            value={min}\r\n                            onChange={setValue}\r\n                            type=\"number\"\r\n                            min={-1}\r\n                            max={max}\r\n                            onClick={changeInc}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button\r\n                    min={min}\r\n                    max={max}\r\n                    buttonName={props.buttonName}\r\n                    setButton={setButton}\r\n                    name={props.buttonName.button}\r\n                    changeSettings={props.changeSettings}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from '../Ferst.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    min: number,\r\n    max: number,\r\n    num: number\r\n    displey: boolean,\r\n}\r\n\r\nexport function Counter({min, max, ...props}: ButtonPropsType) {\r\n\r\n    const SetDispley = () => {\r\n        return (\r\n            <div\r\n                className={s.divSet}>\r\n                enter value\r\n            </div>\r\n        )\r\n    }\r\n    const ErrorDispl = () => {\r\n        return(\r\n            <div\r\n                className={s.divSet}>\r\n                Error\r\n                enter correct value\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div\r\n            // style={div}\r\n            className={props.num === max ? s.redFive : s.counter}>\r\n            {props.displey ? props.num : (min === max || min === -1 || min > max) ? ErrorDispl() : SetDispley()}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import s from './ClaudCounter.module.css'\r\nimport {Button} from \"./Button\";\r\nimport {Counter} from \"./Ð¡ounter\";\r\nimport React from \"react\";\r\n\r\ntype buttonProps = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonControl: (e: string) => void,\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    displey: boolean\r\n    id?: boolean\r\n    changeSettings?: () => void\r\n}\r\n\r\nexport function ClaudCounter({buttonName, counterValue, ...props}: buttonProps) {\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.displey}>\r\n                <Counter min={counterValue.min} max={counterValue.max} num={counterValue.num} displey={props.displey}/>\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button\r\n                    num={counterValue.num}\r\n                    buttonControl={() => props.buttonControl(buttonName.buttonOne)}\r\n                    min={counterValue.min}\r\n                    max={counterValue.max}\r\n                    buttonName={buttonName}\r\n                    display={props.displey}\r\n                    name={buttonName.buttonOne}\r\n                />\r\n                <Button\r\n                    num={counterValue.num}\r\n                    buttonControl={() => props.buttonControl(buttonName.buttonTwo)}\r\n                    min={counterValue.min}\r\n                    max={counterValue.max}\r\n                    buttonName={buttonName}\r\n                    display={props.displey}\r\n                    name={buttonName.buttonTwo}\r\n                />\r\n                {props.id &&\r\n                <Button\r\n                    buttonName={buttonName}\r\n                    changeSettings={props.changeSettings}\r\n                    name={buttonName.button}\r\n                    num={counterValue.num}\r\n                    id={props.id}\r\n                    min={counterValue.min}\r\n                    max={counterValue.max}\r\n                />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {SetCloud} from \"../settings/SetCloud\";\r\nimport './../../App.css';\r\nimport {ClaudCounter} from \"../inc/ClaudCounter\";\r\n\r\ntype CV = {\r\n    min: number, max: number, num: number\r\n}\r\ntype CoutnerSetType = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string}\r\n    namesValue: { nameMax: string, nameMin: string }\r\n    changeInc: (value: number, name: string) => void\r\n    setOfButton: (value: number, name: string) => void\r\n    setDispleys: (display: boolean) => void\r\n    setCounterValue: (value: CV) => void\r\n    displey: boolean\r\n    buttonControl: (e: string) => void,\r\n    id?: string\r\n}\r\n\r\nexport const CounterSet = (props: CoutnerSetType) => {\r\n    return (\r\n        <div className={'conteiner'}>\r\n            <div>\r\n                <SetCloud\r\n                    counterValue={props.counterValue}\r\n                    buttonName={props.buttonName}\r\n                    namesValue={props.namesValue}\r\n                    changeInc={props.changeInc}\r\n                    setOfButton={props.setOfButton}\r\n                    setCounterValue={props.setCounterValue}\r\n                    setDispleys={props.setDispleys}\r\n                    displey={props.displey}\r\n                />\r\n            </div>\r\n            <div>\r\n                <ClaudCounter\r\n                    counterValue={props.counterValue}\r\n                    buttonControl={props.buttonControl}\r\n                    buttonName={props.buttonName}\r\n                    displey={props.displey}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport './../../App.css';\r\nimport {SetCloud} from \"../settings/SetCloud\";\r\nimport {ClaudCounter} from \"../inc/ClaudCounter\";\r\n\r\ntype CV = {\r\n    min: number, max: number, num: number\r\n}\r\ntype CoutnerSetType = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    namesValue: { nameMax: string, nameMin: string }\r\n    changeInc: (value: number, name: string) => void\r\n    setOfButton: (value: number, name: string) => void\r\n    setDispleys: (display: boolean) => void\r\n    setCounterValue: (value: CV) => void\r\n    displey: boolean\r\n    buttonControl: (e: string) => void,\r\n}\r\nexport const CustomCounter = (props: CoutnerSetType) => {\r\n    const [settings, setSettings] = useState(true)\r\n    const changeSettings = () => {\r\n        setSettings(!settings)\r\n    }\r\n    return (\r\n        <div className={'conteiner'}>\r\n\r\n            {!settings ?\r\n                <SetCloud\r\n                    counterValue={props.counterValue}\r\n                    buttonName={props.buttonName}\r\n                    namesValue={props.namesValue}\r\n                    changeInc={props.changeInc}\r\n                    setOfButton={props.setOfButton}\r\n                    setCounterValue={props.setCounterValue}\r\n                    setDispleys={props.setDispleys}\r\n                    displey={props.displey}\r\n                    id={settings}\r\n                    changeSettings={changeSettings}\r\n                />\r\n                :\r\n                <ClaudCounter\r\n                    id={settings}\r\n                    counterValue={props.counterValue}\r\n                    buttonControl={props.buttonControl}\r\n                    buttonName={props.buttonName}\r\n                    displey={props.displey}\r\n                    changeSettings={changeSettings}\r\n                />}\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {CounterSet} from \"./Components/VariantOne/CounterSet\";\r\nimport {BrowserRouter, NavLink, Route, Routes} from \"react-router-dom\";\r\nimport {CustomCounter} from \"./Components/VariantTwoo/CustomCounter\";\r\n\r\nfunction App() {\r\n    let buttonName = {buttonOne: \"INC\", buttonTwo: \"RESET\", button: \"SET\"}\r\n    let {buttonOne, buttonTwo} = buttonName\r\n    let namesValue = {nameMax: \"Max Value\", nameMin: \"Min Value\"}\r\n    const [displey, setDispleys] = useState(true)\r\n    console.log(displey + ' znach')\r\n    const [counterValue, setCounterValue] = useState(\r\n        {min: 0, max: 10, num: 0}\r\n    )\r\n    useEffect(() => {\r\n        let values = (localStorage.getItem('values'))\r\n        if (values) {\r\n            let num = JSON.parse(values)\r\n            num.num = JSON.parse(values).min\r\n            setCounterValue(num)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('values', JSON.stringify(counterValue))\r\n    }, [counterValue])\r\n\r\n    const setOfButton = (value: number, name: string) => {\r\n        let copy = {...counterValue}\r\n        if (name == namesValue.nameMax) {\r\n            setCounterValue({...copy, max: value})\r\n        }\r\n        if (name == namesValue.nameMin) {\r\n            let copys = {...counterValue, min: value}\r\n            setCounterValue({...copys})\r\n        }\r\n        if (name == buttonName.button) {\r\n            let copys = {...counterValue, num: value}\r\n            setCounterValue({...copys})\r\n        }\r\n    }\r\n    const changeInc = (value: number, name: string) => {\r\n        let copy = {...counterValue}\r\n        if (name === namesValue.nameMax) {\r\n            setCounterValue({...copy, max: value})\r\n        }\r\n        if (name === namesValue.nameMin) {\r\n            setCounterValue({...copy, min: value})\r\n        }\r\n    }\r\n    const buttonInc = (but: string) => {\r\n        let copy = {...counterValue}\r\n        if (but === buttonOne && counterValue.num < counterValue.max) {\r\n            setCounterValue({...copy, num: (counterValue.num + 1)})\r\n        }\r\n        if (but === buttonTwo) {\r\n            setCounterValue({...copy, num: counterValue.min})\r\n        }\r\n    }\r\n    return (\r\n        <BrowserRouter>\r\n            <div className={'App'}>\r\n                <div className={\"block\"}>\r\n                    <NavLink to={\"/ClaudFive/\"}>\r\n                        <button className={'select'}>First_option</button>\r\n                    </NavLink>\r\n                    <NavLink to={\"/SecondVar/\"}>\r\n                        <button className={'select'}>Second_option</button>\r\n                    </NavLink>\r\n                </div>\r\n                <Routes>\r\n                    <Route path='/ClaudFive'\r\n                           element={<CounterSet\r\n                               counterValue={counterValue}\r\n                               buttonName={buttonName}\r\n                               namesValue={namesValue}\r\n                               changeInc={changeInc}\r\n                               setOfButton={setOfButton}\r\n                               setCounterValue={setCounterValue}\r\n                               setDispleys={setDispleys}\r\n                               displey={displey}\r\n                               buttonControl={buttonInc}\r\n                           />}/>\r\n                    <Route path='/SecondVar'\r\n                           element={\r\n                               <CustomCounter\r\n                                   counterValue={counterValue}\r\n                                   buttonName={buttonName}\r\n                                   namesValue={namesValue}\r\n                                   changeInc={changeInc}\r\n                                   setOfButton={setOfButton}\r\n                                   setCounterValue={setCounterValue}\r\n                                   setDispleys={setDispleys}\r\n                                   displey={displey}\r\n                                   buttonControl={buttonInc}\r\n                               />}/>\r\n                </Routes>\r\n            </div>\r\n\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SetCloud_item__Xo9gz\",\"div\":\"SetCloud_div__10FXc\",\"displey\":\"SetCloud_displey__31L1i\",\"button\":\"SetCloud_button__WX6iT\",\"setCoumter\":\"SetCloud_setCoumter__26mm-\",\"redStyle\":\"SetCloud_redStyle__3fEwZ\",\"stylesInput\":\"SetCloud_stylesInput__1Vy6o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonSet\":\"Ferst_buttonSet__2iAw-\",\"disabled\":\"Ferst_disabled__1SUKq\",\"redFive\":\"Ferst_redFive__2b403\",\"div\":\"Ferst_div__sKDBO\",\"divSet\":\"Ferst_divSet__19U-Y\",\"counter\":\"Ferst_counter__2BsHd\"};"],"sourceRoot":""}