{"version":3,"sources":["Components/inc/ClaudCounter.module.css","Components/inc/Button.tsx","Components/settings/SetCloud.tsx","Components/inc/Ð¡ounter.tsx","Components/inc/ClaudCounter.tsx","Components/VariantOne/CounterSet.tsx","Components/VariantTwoo/CustomCounter.tsx","App.tsx","index.tsx","Components/settings/SetCloud.module.css","Components/Ferst.module.css"],"names":["module","exports","Button","num","min","max","buttonName","name","props","className","s","buttonSet","disabled","buttonOne","display","buttonTwo","button","onClick","buttonControl","setButton","changeSettings","SetCloud","counterValue","changeInc","setDispleys","namesValue","nameMax","nameMin","setValue","e","currentTarget","id","setOfButton","valueAsNumber","Number","value","item","displey","setCoumter","redStyle","stylesInput","onChange","type","Counter","redFive","counter","divSet","ClaudCounter","CounterSet","setCounterValue","CustomCounter","useState","settings","setSettings","App","console","log","useEffect","values","localStorage","getItem","JSON","parse","setItem","stringify","copy","copys","buttonInc","but","to","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3bc750ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ClaudCounter_item__2vEGf\",\"displey\":\"ClaudCounter_displey__3tp1O\",\"button\":\"ClaudCounter_button__13MKi\"};","import React from 'react';\r\nimport s from '../Ferst.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    num?: number,\r\n    buttonControl?: () => void,\r\n    min?: number,\r\n    max?: number,\r\n    name: string\r\n    setButton?: () => void\r\n    display?: boolean\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    id?: boolean\r\n    changeSettings?: () => void\r\n}\r\n\r\nexport function Button({num, min, max, buttonName, name, ...props}: ButtonPropsType) {\r\n        const buttonHandler = () => {\r\n        if (props.buttonControl) {\r\n            props.buttonControl()\r\n        }\r\n        if (props.setButton) {\r\n            props.setButton()\r\n        }\r\n        if (props.changeSettings) {\r\n            props.changeSettings()\r\n        }\r\n    }\r\n    return (\r\n        <button\r\n            className={s.buttonSet}\r\n            disabled={\r\n                (name === buttonName.buttonOne && !props.display)\r\n                || (name === buttonName.buttonTwo && !props.display)\r\n                || (name === buttonName.button && props.display)\r\n                || (name === buttonName.buttonOne && num === max)\r\n                || (name === buttonName.buttonTwo && num === min)\r\n                || (min === -1)\r\n                || (min === max)\r\n            }\r\n            onClick={buttonHandler}\r\n        >\r\n            {name}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './SetCloud.module.css'\r\nimport {Button} from \"../inc/Button\";\r\n\r\ntype CV = {\r\n    min: number, max: number, num: number\r\n}\r\ntype InputNumberType = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    namesValue: { nameMax: string, nameMin: string }\r\n    changeInc: (value: number, name: string) => void\r\n    setOfButton: (value: number, name: string) => void\r\n    setDispleys: (display: boolean) => void\r\n    setCounterValue: (value: CV) => void\r\n    displey: boolean\r\n    id?: boolean\r\n    changeSettings?: () => void\r\n}\r\n\r\nexport const SetCloud = ({counterValue, ...props}: InputNumberType) => {\r\n    let {min, max} = counterValue\r\n    const changeInc = () => {\r\n        props.setDispleys(false)\r\n    }\r\n    const setButton = () => {\r\n        props.setDispleys(true)\r\n        props.setOfButton(min, props.buttonName.button)\r\n        if (props.changeSettings) {\r\n            props.changeSettings()\r\n        }\r\n    }\r\n    let {nameMax, nameMin} = props.namesValue\r\n    const setValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.id == nameMax) {\r\n            props.setOfButton(e.currentTarget.valueAsNumber, nameMax)\r\n        }\r\n        if (e.currentTarget.id == nameMin) {\r\n            props.setOfButton(Number(e.currentTarget.value), nameMin)\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.displey}>\r\n                <div className={s.setCoumter}>\r\n                    <div>\r\n                        {nameMax}\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className={min === max ? s.redStyle : s.stylesInput}\r\n                            min={min}\r\n                            id={nameMax}\r\n                            value={max}\r\n                            onChange={setValue}\r\n                            type=\"number\"\r\n                            onClick={changeInc}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={s.setCoumter}>\r\n                    <div>\r\n                        {nameMin}\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            className={min === max ? s.redStyle : min === -1 ? s.redStyle : s.stylesInput}\r\n                            id={nameMin}\r\n                            value={min}\r\n                            onChange={setValue}\r\n                            type=\"number\"\r\n                            min={-1}\r\n                            max={max}\r\n                            onClick={changeInc}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button\r\n                    min={min}\r\n                    max={max}\r\n                    buttonName={props.buttonName}\r\n                    setButton={setButton}\r\n                    name={props.buttonName.button}\r\n                    changeSettings={props.changeSettings}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from '../Ferst.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    min: number,\r\n    max: number,\r\n    num: number\r\n    displey: boolean,\r\n}\r\n\r\nexport function Counter({min, max, ...props}: ButtonPropsType) {\r\n\r\n    const SetDispley = () => {\r\n        return (\r\n            <div\r\n                className={s.divSet}>\r\n                enter value\r\n            </div>\r\n        )\r\n    }\r\n    const ErrorDispl = () => {\r\n        return(\r\n            <div\r\n                className={s.divSet}>\r\n                Error\r\n                enter correct value\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div\r\n            // style={div}\r\n            className={props.num === max ? s.redFive : s.counter}>\r\n            {props.displey ? props.num : (min === max || min === -1 || min > max) ? ErrorDispl() : SetDispley()}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import s from './ClaudCounter.module.css'\r\nimport {Button} from \"./Button\";\r\nimport {Counter} from \"./Ð¡ounter\";\r\nimport React from \"react\";\r\n\r\ntype buttonProps = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonControl: (e: string) => void,\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    displey: boolean\r\n    id?: boolean\r\n    changeSettings?: () => void\r\n}\r\n\r\nexport function ClaudCounter({buttonName, counterValue, ...props}: buttonProps) {\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.displey}>\r\n                <Counter min={counterValue.min} max={counterValue.max} num={counterValue.num} displey={props.displey}/>\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button\r\n                    num={counterValue.num}\r\n                    buttonControl={() => props.buttonControl(buttonName.buttonOne)}\r\n                    min={counterValue.min}\r\n                    max={counterValue.max}\r\n                    buttonName={buttonName}\r\n                    display={props.displey}\r\n                    name={buttonName.buttonOne}\r\n                />\r\n                <Button\r\n                    num={counterValue.num}\r\n                    buttonControl={() => props.buttonControl(buttonName.buttonTwo)}\r\n                    min={counterValue.min}\r\n                    max={counterValue.max}\r\n                    buttonName={buttonName}\r\n                    display={props.displey}\r\n                    name={buttonName.buttonTwo}\r\n                />\r\n                {props.id &&\r\n                <Button\r\n                    buttonName={buttonName}\r\n                    changeSettings={props.changeSettings}\r\n                    name={buttonName.button}\r\n                    num={counterValue.num}\r\n                    id={props.id}\r\n                    min={counterValue.min}\r\n                    max={counterValue.max}\r\n                />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {SetCloud} from \"../settings/SetCloud\";\r\nimport './../../App.css';\r\nimport {ClaudCounter} from \"../inc/ClaudCounter\";\r\n\r\ntype CV = {\r\n    min: number, max: number, num: number\r\n}\r\ntype CoutnerSetType = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string}\r\n    namesValue: { nameMax: string, nameMin: string }\r\n    changeInc: (value: number, name: string) => void\r\n    setOfButton: (value: number, name: string) => void\r\n    setDispleys: (display: boolean) => void\r\n    setCounterValue: (value: CV) => void\r\n    displey: boolean\r\n    buttonControl: (e: string) => void,\r\n    id?: string\r\n}\r\n\r\nexport const CounterSet = (props: CoutnerSetType) => {\r\n    return (\r\n        <div className={'conteiner'}>\r\n            <div>\r\n                <SetCloud\r\n                    counterValue={props.counterValue}\r\n                    buttonName={props.buttonName}\r\n                    namesValue={props.namesValue}\r\n                    changeInc={props.changeInc}\r\n                    setOfButton={props.setOfButton}\r\n                    setCounterValue={props.setCounterValue}\r\n                    setDispleys={props.setDispleys}\r\n                    displey={props.displey}\r\n                />\r\n            </div>\r\n            <div>\r\n                <ClaudCounter\r\n                    counterValue={props.counterValue}\r\n                    buttonControl={props.buttonControl}\r\n                    buttonName={props.buttonName}\r\n                    displey={props.displey}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport './../../App.css';\r\nimport {SetCloud} from \"../settings/SetCloud\";\r\nimport {ClaudCounter} from \"../inc/ClaudCounter\";\r\n\r\ntype CV = {\r\n    min: number, max: number, num: number\r\n}\r\ntype CoutnerSetType = {\r\n    counterValue: { min: number, max: number, num: number }\r\n    buttonName: { buttonOne: string, buttonTwo: string, button: string }\r\n    namesValue: { nameMax: string, nameMin: string }\r\n    changeInc: (value: number, name: string) => void\r\n    setOfButton: (value: number, name: string) => void\r\n    setDispleys: (display: boolean) => void\r\n    setCounterValue: (value: CV) => void\r\n    displey: boolean\r\n    buttonControl: (e: string) => void,\r\n}\r\nexport const CustomCounter = (props: CoutnerSetType) => {\r\n    const [settings, setSettings] = useState(true)\r\n    const changeSettings = () => {\r\n        setSettings(!settings)\r\n    }\r\n    return (\r\n        <div className={'conteiner'}>\r\n\r\n            {!settings ?\r\n                <SetCloud\r\n                    counterValue={props.counterValue}\r\n                    buttonName={props.buttonName}\r\n                    namesValue={props.namesValue}\r\n                    changeInc={props.changeInc}\r\n                    setOfButton={props.setOfButton}\r\n                    setCounterValue={props.setCounterValue}\r\n                    setDispleys={props.setDispleys}\r\n                    displey={props.displey}\r\n                    id={settings}\r\n                    changeSettings={changeSettings}\r\n                />\r\n                :\r\n                <ClaudCounter\r\n                    id={settings}\r\n                    counterValue={props.counterValue}\r\n                    buttonControl={props.buttonControl}\r\n                    buttonName={props.buttonName}\r\n                    displey={props.displey}\r\n                    changeSettings={changeSettings}\r\n                />}\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {CounterSet} from \"./Components/VariantOne/CounterSet\";\r\nimport {BrowserRouter, NavLink, Route, Routes} from \"react-router-dom\";\r\nimport {CustomCounter} from \"./Components/VariantTwoo/CustomCounter\";\r\n\r\nfunction App() {\r\n    let buttonName = {buttonOne: \"INC\", buttonTwo: \"RESET\", button: \"SET\"}\r\n    let {buttonOne, buttonTwo} = buttonName\r\n    let namesValue = {nameMax: \"Max Value\", nameMin: \"Min Value\"}\r\n    const [displey, setDispleys] = useState(true)\r\n    console.log(displey + ' znach')\r\n    const [counterValue, setCounterValue] = useState(\r\n        {min: 0, max: 10, num: 0}\r\n    )\r\n    useEffect(() => {\r\n        let values = (localStorage.getItem('values'))\r\n        if (values) {\r\n            let num = JSON.parse(values)\r\n            num.num = JSON.parse(values).min\r\n            setCounterValue(num)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('values', JSON.stringify(counterValue))\r\n    }, [counterValue])\r\n\r\n    const setOfButton = (value: number, name: string) => {\r\n        let copy = {...counterValue}\r\n        if (name == namesValue.nameMax) {\r\n            setCounterValue({...copy, max: value})\r\n        }\r\n        if (name == namesValue.nameMin) {\r\n            let copys = {...counterValue, min: value}\r\n            setCounterValue({...copys})\r\n        }\r\n        if (name == buttonName.button) {\r\n            let copys = {...counterValue, num: value}\r\n            setCounterValue({...copys})\r\n        }\r\n    }\r\n    const changeInc = (value: number, name: string) => {\r\n        let copy = {...counterValue}\r\n        if (name === namesValue.nameMax) {\r\n            setCounterValue({...copy, max: value})\r\n        }\r\n        if (name === namesValue.nameMin) {\r\n            setCounterValue({...copy, min: value})\r\n        }\r\n    }\r\n    const buttonInc = (but: string) => {\r\n        let copy = {...counterValue}\r\n        if (but === buttonOne && counterValue.num < counterValue.max) {\r\n            setCounterValue({...copy, num: (counterValue.num + 1)})\r\n        }\r\n        if (but === buttonTwo) {\r\n            setCounterValue({...copy, num: counterValue.min})\r\n        }\r\n    }\r\n    return (\r\n        <BrowserRouter>\r\n            <div className={'App'}>\r\n                <div className={\"block\"}>\r\n                    <NavLink to={\"/ClaudFive/\"}>\r\n                        <button className={'select'}>First_option</button>\r\n                    </NavLink>\r\n                    <NavLink to={\"/SecondVar/\"}>\r\n                        <button className={'select'}>Second_option</button>\r\n                    </NavLink>\r\n                </div>\r\n                <Routes>\r\n                    <Route path='/ClaudFive/'\r\n                           element={<CounterSet\r\n                               counterValue={counterValue}\r\n                               buttonName={buttonName}\r\n                               namesValue={namesValue}\r\n                               changeInc={changeInc}\r\n                               setOfButton={setOfButton}\r\n                               setCounterValue={setCounterValue}\r\n                               setDispleys={setDispleys}\r\n                               displey={displey}\r\n                               buttonControl={buttonInc}\r\n                           />}/>\r\n                    <Route path='/SecondVar'\r\n                           element={\r\n                               <CustomCounter\r\n                                   counterValue={counterValue}\r\n                                   buttonName={buttonName}\r\n                                   namesValue={namesValue}\r\n                                   changeInc={changeInc}\r\n                                   setOfButton={setOfButton}\r\n                                   setCounterValue={setCounterValue}\r\n                                   setDispleys={setDispleys}\r\n                                   displey={displey}\r\n                                   buttonControl={buttonInc}\r\n                               />}/>\r\n                </Routes>\r\n            </div>\r\n\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"SetCloud_item__Xo9gz\",\"displey\":\"SetCloud_displey__31L1i\",\"button\":\"SetCloud_button__WX6iT\",\"setCoumter\":\"SetCloud_setCoumter__26mm-\",\"redStyle\":\"SetCloud_redStyle__3fEwZ\",\"stylesInput\":\"SetCloud_stylesInput__1Vy6o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonSet\":\"Ferst_buttonSet__2iAw-\",\"redFive\":\"Ferst_redFive__2b403\",\"div\":\"Ferst_div__sKDBO\",\"divSet\":\"Ferst_divSet__19U-Y\",\"counter\":\"Ferst_counter__2BsHd\"};"],"sourceRoot":""}